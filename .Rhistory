print(target_climate_name)
# Get Model Values
Models    = unique(loca2_annual$Model)
Scenarios = unique(loca2_annual$Scenario)
loca2_annual_ptiles = loca2_annual |>
group_by(Scenario,
Percentile,
Year,
climdiv) |>
summarise(Time              =     mean(x = Time),
Temp_Avg_100      =      max(x = Temp_Avg),
Temp_Avg_095      = quantile(x = Temp_Avg,      probs = 0.95),
Temp_Avg_075      = quantile(x = Temp_Avg,      probs = 0.75),
Temp_Avg_050      = quantile(x = Temp_Avg,      probs = 0.50),
Temp_Avg_025      = quantile(x = Temp_Avg,      probs = 0.25),
Temp_Avg_005      = quantile(x = Temp_Avg,      probs = 0.05),
Temp_Avg_000      =      min(x = Temp_Avg),
Temp_Avg_avg      =     mean(x = Temp_Avg),
Temp_Avg_std      =       sd(x = Temp_Avg),
Precipitation_100 =      max(x = Precipitation),
Precipitation_095 = quantile(x = Precipitation, probs = 0.95),
Precipitation_075 = quantile(x = Precipitation, probs = 0.75),
Precipitation_050 = quantile(x = Precipitation, probs = 0.50),
Precipitation_025 = quantile(x = Precipitation, probs = 0.25),
Precipitation_005 = quantile(x = Precipitation, probs = 0.05),
Precipitation_000 =      max(x = Precipitation),
Precipitation_avg =     mean(x = Precipitation),
Precipitation_std =       sd(x = Precipitation)) |>
ungroup()
ggplot(data = loca2_annual_ptiles) +
aes(x     = Time,
y     = Temp_Avg_avg,
color = Scenario,
fill  = Scenario) +
theme_bw() +
theme(legend.title  = element_text(colour = "#002554", family = "OpenSans")) +
theme(legend.text   = element_text(colour = "#002554", family = "OpenSans")) +
theme(legend.title  = element_text(colour = "#002554", family = "OpenSans")) +
theme(plot.title    = element_text(colour = "#002554", family = "OpenSans")) +
theme(plot.subtitle = element_text(colour = "#002554", family = "OpenSans")) +
theme(plot.caption  = element_text(colour = "#002554", family = "OpenSans")) +
theme(axis.title.x = element_text(colour = "#002554", family = "OpenSans")) +
theme(axis.title.y = element_text(colour = "#002554", family = "OpenSans")) +
theme(axis.text.x  = element_text(colour = "#002554", family = "OpenSans")) +
theme(axis.text.y  = element_text(colour = "#002554", family = "OpenSans")) +
theme(axis.line    = element_line(colour = "#002554"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border     = element_blank(),
panel.background = element_blank()) +
geom_rect(mapping = aes(xmin = historical_start_date,
xmax = historical_end_date,
ymin = -Inf,
ymax =  Inf),
color   = NA,
fill    = "grey95") +
geom_rect(mapping = aes(xmin = future_start_date,
xmax = future_end_date,
ymin = -Inf,
ymax =  Inf),
color   = NA,
fill    = "grey95") +
geom_line() +
geom_line(data    =  nclimdiv_annual,
mapping = aes(x = Time,
y = Temp_Avg))   +
geom_ribbon(mapping = aes(ymax = Temp_Avg_095,
ymin = Temp_Avg_005),
alpha   = 0.1,
color = FALSE) +
geom_ribbon(mapping = aes(ymax = Temp_Avg_075,
ymin = Temp_Avg_025),
alpha   = 0.2,
color = FALSE)  +
ggtitle(label    = "CMIP6-LOCA2 Temperatures ",
subtitle = target_climate_name) +
labs(caption = str_c("Solid Lines are the Cross-Ensemble Mean; ",
"Shaded Areas are the IQR & Central 90%\n",
"Climate Divisions are Spatially Aggregated by ",
str_to_title(target_aggregation_statistic),
str = "")) +
scale_fill_manual(  values = c(scenario_color,"grey")) +
scale_colour_manual(values = c(scenario_color,"black")) +
ylab(label = "Mean Annual Temperature (Â°C)") +
scale_x_date(breaks = seq(from = as.Date("1950-01-01"),
to   = as.Date("2100-01-01"),
by   = "10 year"),
date_labels = "%Y")
ggplot(data = loca2_annual_ptiles) +
aes(x     = Time,
y     = Precipitation_avg,
color = Scenario,
fill  = Scenario) +
theme_bw() +
theme(legend.title  = element_text(colour = "#002554", family = "OpenSans")) +
theme(legend.text   = element_text(colour = "#002554", family = "OpenSans")) +
theme(legend.title  = element_text(colour = "#002554", family = "OpenSans")) +
theme(plot.title    = element_text(colour = "#002554", family = "OpenSans")) +
theme(plot.subtitle = element_text(colour = "#002554", family = "OpenSans")) +
theme(plot.caption  = element_text(colour = "#002554", family = "OpenSans")) +
theme(axis.title.x = element_text(colour = "#002554", family = "OpenSans")) +
theme(axis.title.y = element_text(colour = "#002554", family = "OpenSans")) +
theme(axis.text.x  = element_text(colour = "#002554", family = "OpenSans")) +
theme(axis.text.y  = element_text(colour = "#002554", family = "OpenSans")) +
theme(axis.line    = element_line(colour = "#002554"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border     = element_blank(),
panel.background = element_blank()) +
scale_fill_manual(  values = c(scenario_color,"grey")) +
scale_colour_manual(values = c(scenario_color,"black")) +
geom_rect(mapping = aes(xmin = historical_start_date,
xmax = historical_end_date,
ymin = -Inf,
ymax =  Inf),
color   = NA,
fill    = "grey95") +
geom_rect(mapping = aes(xmin = future_start_date,
xmax = future_end_date,
ymin = -Inf,
ymax =  Inf),
color   = NA,
fill    = "grey95") +
geom_line() +
geom_line(data    =  nclimdiv_annual,
mapping = aes(x = Time,
y = Precipitation))   +
geom_ribbon(mapping = aes(ymax = Precipitation_095,
ymin = Precipitation_005),
alpha   = 0.1,
color = FALSE) +
geom_ribbon(mapping = aes(ymax = Precipitation_075,
ymin = Precipitation_025),
alpha   = 0.2,
color = FALSE)  +
ggtitle(label    = "CMIP6-LOCA2 Precipitation ",
subtitle = target_climate_name) +
labs(caption = str_c("Solid Lines are the Cross-Ensemble Mean; ",
"Shaded Areas are the IQR & Central 90%\n",
"Climate Divisions are Spatially Aggregated by ",
str_to_title(target_aggregation_statistic),
str = "")) +
ylab(label = "Mean Precipitation (mm)") +
scale_x_date(breaks = seq(from = as.Date("1950-01-01"),
to   = as.Date("2100-01-01"),
by   = "10 year"),
date_labels = "%Y")
loca2_budget_series = loca2_monthly |>
filter(((Time > historical_start_date) & (Time < historical_end_date)) |
((Time > future_start_date) & (Time < future_end_date))) |>
mutate(Scenario = if_else(condition = (Time < as.Date("2015-01-01")),
true      = str_c(Scenario, " ", historical_period_string),
false     = Scenario)) |>
mutate(Scenario = if_else(condition = (Time > as.Date("2015-01-01")),
true      = str_c(Scenario, " ", future_period_string),
false     = Scenario)) |>
select(Scenario,
Model,
Percentile,
climdiv,
Time,
Temp_Max,
Temp_Avg,
Temp_Min,
Precipitation,
Storage,
Storage,
Snowpack,
Potential_Evap,
Evaporation,
Deficit,
Recharge,
Surplus) |>
group_by(Scenario,
Percentile,
climdiv,
Time) |>
summarize(Temp_Max       = round(mean(Temp_Max),       2),
Temp_Avg       = round(mean(Temp_Avg),       2),
Temp_Min       = round(mean(Temp_Min),       2),
Precipitation  = round(mean(Precipitation),  2),
Storage        = round(mean(Storage),        2),
Snowpack       = round(mean(Snowpack),       2),
Potential_Evap = round(mean(Potential_Evap), 2),
Evaporation    = round(mean(Evaporation),    2),
Deficit        = round(mean(Deficit),        2),
Recharge       = round(mean(Recharge),       2),
Surplus        = round(mean(Surplus),        2)) |>
ungroup()
loca2_budget_monthly = loca2_monthly |>
filter(((Time > historical_start_date) & (Time < historical_end_date)) |
((Time > future_start_date) & (Time < future_end_date))) |>
mutate(Scenario = if_else(condition = (Time < as.Date("2015-01-01")),
true      = str_c(Scenario, " ", historical_period_string),
false     = Scenario)) |>
mutate(Scenario = if_else(condition = (Time > as.Date("2015-01-01")),
true      = str_c(Scenario, " ", future_period_string),
false     = Scenario)) |>
mutate(Month = month(Time, label = TRUE, abbr = TRUE)) |>
select(Scenario,
Percentile,
climdiv,
Time,
Month,
Temp_Max,
Temp_Avg,
Temp_Min,
Precipitation,
Storage,
Snowpack,
Potential_Evap,
Evaporation,
Deficit,
Recharge,
Surplus) |>
group_by(Scenario,
Percentile,
climdiv,
Month) |>
summarize(Year           = round(mean(year(Time)),     0),
Temp_Max       = round(mean(Temp_Max),       2),
Temp_Avg       = round(mean(Temp_Avg),       2),
Temp_Min       = round(mean(Temp_Min),       2),
Precipitation  = round(mean(Precipitation),  2),
Storage        = round(mean(Storage),        2),
Snowpack       = round(mean(Snowpack),       2),
Potential_Evap = round(mean(Potential_Evap), 2),
Evaporation    = round(mean(Evaporation),    2),
Deficit        = round(mean(Deficit),        2),
Recharge       = round(mean(Recharge),       2),
Surplus        = round(mean(Surplus),        2)) |>
ungroup()
subset_lines = loca2_budget_monthly %>%
select(Scenario,
Month,
Precipitation,
Potential_Evap)
subset_lines = gather(data  = subset_lines,
value = "Value",
key   = "Variable",
Precipitation,
Potential_Evap)
subset_lines$Variable = as_factor(subset_lines$Variable)
subset_bars = loca2_budget_monthly %>%
select(Scenario,
Month,
Evaporation,
Surplus,
Recharge,
Snowpack,
Deficit)
subset_bars = gather(data  = subset_bars,
value = "Value",
key   = "Variable",
Deficit,
Surplus,
Recharge,
Snowpack,
Evaporation)
subset_bars$Variable = as_factor(subset_bars$Variable)
ggplot(data = subset_bars) +
facet_wrap(~Scenario) +
theme_bw() +
theme(strip.background = element_rect(fill=NA, color=NA),
strip.text      = element_text(colour = "#002554", family = "OpenSans"),
panel.border    = element_rect(colour = "#002554")) +
theme(legend.title  = element_text(colour = "#002554", family = "OpenSans"),
legend.text   = element_text(colour = "#002554", family = "OpenSans")) +
theme(plot.title    = element_text(colour = "#002554", family = "OpenSans"),
plot.subtitle = element_text(colour = "#002554", family = "OpenSans"),
plot.caption  = element_text(colour = "#002554", family = "OpenSans")) +
theme(axis.title.x  = element_blank(),
axis.title.y  = element_blank(),
axis.text.x   = element_text(colour = "#002554", family = "OpenSans"),
axis.text.y   = element_text(colour = "#002554", family = "OpenSans")) +
theme(panel.grid.minor.y =  element_blank()) +
theme(panel.grid.minor = element_blank(),
panel.border     = element_blank(),
panel.background = element_blank()) +
theme(axis.line.x.top    = element_blank(),
axis.line.y.right  = element_blank() ) +
theme(axis.line.x.bottom = element_line(colour = "#002554"),
axis.line.y.left   = element_line(colour = "#002554") ) +
aes(x     = Month,
y     = Value) +
ggtitle(label    = "Mean Period Thornthwaite-Mather Water Budget",
subtitle = target_climate_name) +
labs(caption = str_c("Soil Storage Capacity = ",
round(loca_metadata$climdiv_mean_mass_content_of_water_in_soil,1),
" mm",
sep = "")) +
xlab(label = "Time") +
ylab(label = "Budget (mm)") +
scale_fill_manual(values = c( "Precipitation"  = "darkgreen",
"Potential_Evap" = "darkred",
"Deficit"     = "orange",
"Surplus"     = "green",
"Recharge"    = "blue",
"Snowpack"    = "lightcyan",
"Evaporation" = "yellow"),
name = NULL) +
geom_bar(data    = subset_bars,
mapping = aes(x     = Month,
y    = Value,
fill = Variable),
stat = 'identity',
position = "stack") +
scale_color_manual(values = c( "Precipitation"  = "darkgreen",
"Potential_Evap" = "darkred",
"Deficit"        = "orange",
"Surplus"        = "green",
"Recharge"       = "blue",
"Snowpack"       = "lightcyan",
"Evaporation" = "yellow"),
name = NULL) +
geom_line(data    = subset_lines,
mapping = aes(x     = Month,
y     = Value,
group = Variable,
color = Variable,
fill  = NULL),
size=0.75)
subset_all_lines = loca2_budget_monthly |>
select(Scenario,
Month,
Temp_Avg,
Precipitation,
Potential_Evap,
Storage,
Snowpack,
Evaporation,
Deficit,
Recharge,
Surplus)
subset_all_lines = pivot_longer(data      = subset_all_lines,
names_to  = "Variable",
values_to = "Value",
cols      = c(Temp_Avg,
Precipitation,
Potential_Evap,
Storage,
Snowpack,
Evaporation,
Deficit,
Recharge,
Surplus))
subset_all_lines$Variable = factor(subset_all_lines$Variable,
levels = c("Temp_Avg",
"Precipitation",
"Potential_Evap",
"Storage",
"Snowpack",
"Evaporation",
"Deficit",
"Recharge",
"Surplus"),
ordered = TRUE)
levels(subset_all_lines$Month) = short_months
ggplot(data = subset_all_lines) +
aes(x     = Month,
y     = Value,
group = Scenario,
color = Scenario,
fill  = NULL) +
facet_wrap(~Variable, scales = "free") +
theme_bw() +
theme(strip.background = element_rect(fill=NA, color=NA),
strip.text      = element_text(colour = "#002554", family = "OpenSans"),
panel.border    = element_rect(colour = "#002554")) +
theme(legend.title  = element_text(colour = "#002554", family = "OpenSans"),
legend.text   = element_text(colour = "#002554", family = "OpenSans")) +
theme(plot.title    = element_text(colour = "#002554", family = "OpenSans"),
plot.subtitle = element_text(colour = "#002554", family = "OpenSans"),
plot.caption  = element_text(colour = "#002554", family = "OpenSans")) +
theme(axis.title.x  = element_blank(),
axis.title.y  = element_blank(),
axis.text.x   = element_text(colour = "#002554", family = "OpenSans"),
axis.text.y   = element_text(colour = "#002554", family = "OpenSans")) +
theme(panel.grid.minor.y =  element_blank()) +
theme(panel.grid.minor = element_blank(),
panel.border     = element_blank(),
panel.background = element_blank()) +
theme(axis.line.x.top    = element_blank(),
axis.line.y.right  = element_blank() ) +
theme(axis.line.x.bottom = element_line(colour = "#002554"),
axis.line.y.left   = element_line(colour = "#002554") ) +
aes(x     = Month,
y     = Value) +
ggtitle(label    = "Mean Period Thornthwaite-Mather Water Budget",
subtitle = target_climate_name) +
labs(caption = str_c("Soil Storage Capacity = ",
round(loca_metadata$climdiv_mean_mass_content_of_water_in_soil,1),
" mm",
sep = "")) +
xlab(label = "Time") +
ylab(label = "Budget (mm)") +
scale_color_manual(values = scenario_color) +
geom_line()
load("/Users/wjc/GitHub/LOCA2_Gridded_Analysis/LOCA2_V1_LOCA2_THORNTHWAITE_3901.RData")
load("~/GitHub/LOCA2_Gridded_Analysis/LOCA2_V1_LOCA2_THORNTHWAITE_3901.RData")
load("~/GitHub/LOCA2_Gridded_Analysis/LOCA2_V1_LOCA2_THORNTHWAITE_3901.RData")
debugSource("~/GitHub/LOCA2_Gridded_Analysis/Loca2_WaterBudgets_Prep_HUC.R")
climdiv_metadata_file = str_c("https://thredds.ias.sdsmt.edu:8443/thredds/fileServer/" ,
"LOCA2/" ,
"Specific_Regional_Aggregate_Sets/USGS_HUC08_Basins/" ,
"USGS_HUC08_LUT.RData",
sep = "")
library("stringr")
climdiv_metadata_file = str_c("https://thredds.ias.sdsmt.edu:8443/thredds/fileServer/" ,
"LOCA2/" ,
"Specific_Regional_Aggregate_Sets/USGS_HUC08_Basins/" ,
"USGS_HUC08_LUT.RData",
sep = "")
load(url(climdiv_metadata_file),
verbose = TRUE)
closeAllConnections()
View(USGS_HUC08_LUT)
library(package = "lubridate") # Date-Time Control
library(package = "tidyverse") # Multiple Tidyverse Resources
library(package = "ClimClass")
debugSource("~/GitHub/LOCA2_Gridded_Analysis/Loca2_WaterBudgets_Prep_HUC.R")
nclimdiv_file = str_c("https://thredds.ias.sdsmt.edu:8443/thredds/fileServer/" ,
"CLASS_Examples/" ,
"HUC08_Missouri_River_Basin.Rdata",
sep = "")
View(nCLIMDIV_Metadata)
View(USGS_HUC08_LUT)
View(nCLIMDIV_Metadata)
View(USGS_HUC08_LUT)
load(url(nclimdiv_file),
verbose = TRUE)
USGS_HUC08_LUT$huc08
load(url(climdiv_metadata_file),
verbose = TRUE)
climdiv_metadata_file = str_c("https://thredds.ias.sdsmt.edu:8443/thredds/fileServer/" ,
"LOCA2/" ,
"Specific_Regional_Aggregate_Sets/USGS_HUC08_Basins/" ,
"USGS_HUC08_LUT.RData",
sep = "")
load(url(climdiv_metadata_file),
verbose = TRUE)
closeAllConnections()
debugSource("~/GitHub/LOCA2_Gridded_Analysis/Loca2_WaterBudgets_Prep_HUC.R")
debugSource("~/GitHub/LOCA2_Gridded_Analysis/Loca2_WaterBudgets_Prep_HUC.R")
debugSource("~/GitHub/LOCA2_Gridded_Analysis/Loca2_WaterBudgets_Prep_HUC.R")
View(USGS_HUC08_LUT)
View(USGS_HUC08_LUT)
debugSource("~/GitHub/LOCA2_Gridded_Analysis/Loca2_WaterBudgets_Prep_HUC.R")
View(HUC_table_avail)
View(HUC_table_avail)
View(USGS_HUC08_LUT)
View(USGS_HUC08_LUT)
loca_metadata = USGS_HUC08_LUT |>
filter(climdiv == target_climate_zone)
debugSource("~/GitHub/LOCA2_Gridded_Analysis/Loca2_WaterBudgets_Prep_HUC.R")
debugSource("~/GitHub/LOCA2_Gridded_Analysis/Loca2_WaterBudgets_Prep_HUC.R")
all_hucs = unique(HUC_table_avail$`HUC-08`)
debugSource("~/GitHub/LOCA2_Gridded_Analysis/Loca2_WaterBudgets_Prep_HUC.R")
debugSource("~/GitHub/LOCA2_Gridded_Analysis/Loca2_WaterBudgets_Prep_HUC.R")
loca_metadata
str_c(unique(loca_metadata$huc08),
" Climate Division, ",
unique(loca_metadata$huc08_name),
" (",
unique(loca_metadata$huc04_name),
")",
sep = "")
target_climate_name = str_c(unique(loca_metadata$huc08),
" HUC, ",
unique(loca_metadata$huc08_name),
" (",
unique(loca_metadata$huc04_name),
")",
sep = "")
print(target_climate_name)
str_c("https://thredds.ias.sdsmt.edu:8443/thredds/fileServer/" ,
"LOCA2/" ,
"Specific_Regional_Aggregate_Sets/USGS_HUC08_Basins/" ,
"R_Monthly_Files/ LOCA2_V1_HUC08_MONTHLY_" ,
target_huc ,
".RData",
sep = "")
debugSource("~/GitHub/LOCA2_Gridded_Analysis/Loca2_WaterBudgets_Prep_HUC.R")
View(loca2_monthly)
View(loca2_monthly)
debugSource("~/GitHub/LOCA2_Gridded_Analysis/Loca2_WaterBudgets_Prep_HUC.R")
View(loca2_monthly)
View(loca2_monthly)
debugSource("~/GitHub/LOCA2_Gridded_Analysis/Loca2_WaterBudgets_Prep_HUC.R")
View(loca2_monthly)
View(loca2_monthly)
debugSource("~/GitHub/LOCA2_Gridded_Analysis/Loca2_WaterBudgets_Prep_HUC.R")
View(loca2_monthly)
View(loca2_monthly)
loca_metadata$huc08_mean_mass_content_of_water_in_soil
local_loca2_monthly
loca2_monthly
debugSource("~/GitHub/LOCA2_Gridded_Analysis/Loca2_WaterBudgets_Prep_HUC.R")
View(water_budget)
View(water_budget)
source("~/GitHub/LOCA2_Gridded_Analysis/Loca2_WaterBudgets_Prep_HUC.R")
load("~/GitHub/LOCA2_Gridded_Analysis/LOCA2_V1_LOCA2_THORNTHWAITE_03020101.RData")
View(LOCA2_Water_Budget)
View(LOCA2_Water_Budget)
debugSource("~/GitHub/LOCA2_Gridded_Analysis/Loca2_WaterBudgets_Prep_HUC.R")
View(HUC_table_avail)
View(HUC_table_avail)
View(HUC_table_avail)
View(HUC_table_avail)
debugSource("~/GitHub/LOCA2_Gridded_Analysis/Loca2_WaterBudgets_Prep_HUC.R")
View(HUC_table_avail)
View(HUC_table_avail)
